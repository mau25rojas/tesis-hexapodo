"""autogenerated by genpy from camina3/TrayectoriaEliptica1ParametrosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrayectoriaEliptica1ParametrosRequest(genpy.Message):
  _md5sum = "b193b0c4dec9b7af46cceff880ded261"
  _type = "camina3/TrayectoriaEliptica1ParametrosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

float32 x_Offset
float32 y_Offset
float32 z_Offset
float32 t_Trayectoria
float32 beta
float32 lambda_Apoyo
float32 lambda_Transferencia
float32 dh
float32 alfa
float32 phi

"""
  __slots__ = ['x_Offset','y_Offset','z_Offset','t_Trayectoria','beta','lambda_Apoyo','lambda_Transferencia','dh','alfa','phi']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_Offset,y_Offset,z_Offset,t_Trayectoria,beta,lambda_Apoyo,lambda_Transferencia,dh,alfa,phi

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrayectoriaEliptica1ParametrosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_Offset is None:
        self.x_Offset = 0.
      if self.y_Offset is None:
        self.y_Offset = 0.
      if self.z_Offset is None:
        self.z_Offset = 0.
      if self.t_Trayectoria is None:
        self.t_Trayectoria = 0.
      if self.beta is None:
        self.beta = 0.
      if self.lambda_Apoyo is None:
        self.lambda_Apoyo = 0.
      if self.lambda_Transferencia is None:
        self.lambda_Transferencia = 0.
      if self.dh is None:
        self.dh = 0.
      if self.alfa is None:
        self.alfa = 0.
      if self.phi is None:
        self.phi = 0.
    else:
      self.x_Offset = 0.
      self.y_Offset = 0.
      self.z_Offset = 0.
      self.t_Trayectoria = 0.
      self.beta = 0.
      self.lambda_Apoyo = 0.
      self.lambda_Transferencia = 0.
      self.dh = 0.
      self.alfa = 0.
      self.phi = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_10f.pack(_x.x_Offset, _x.y_Offset, _x.z_Offset, _x.t_Trayectoria, _x.beta, _x.lambda_Apoyo, _x.lambda_Transferencia, _x.dh, _x.alfa, _x.phi))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.x_Offset, _x.y_Offset, _x.z_Offset, _x.t_Trayectoria, _x.beta, _x.lambda_Apoyo, _x.lambda_Transferencia, _x.dh, _x.alfa, _x.phi,) = _struct_10f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_10f.pack(_x.x_Offset, _x.y_Offset, _x.z_Offset, _x.t_Trayectoria, _x.beta, _x.lambda_Apoyo, _x.lambda_Transferencia, _x.dh, _x.alfa, _x.phi))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 40
      (_x.x_Offset, _x.y_Offset, _x.z_Offset, _x.t_Trayectoria, _x.beta, _x.lambda_Apoyo, _x.lambda_Transferencia, _x.dh, _x.alfa, _x.phi,) = _struct_10f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_10f = struct.Struct("<10f")
"""autogenerated by genpy from camina3/TrayectoriaEliptica1ParametrosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TrayectoriaEliptica1ParametrosResponse(genpy.Message):
  _md5sum = "73f6b0fe798d15d67956a66be5ac55de"
  _type = "camina3/TrayectoriaEliptica1ParametrosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 x_S1
float32 y_S1
float32 z_S1




"""
  __slots__ = ['x_S1','y_S1','z_S1']
  _slot_types = ['float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_S1,y_S1,z_S1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrayectoriaEliptica1ParametrosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_S1 is None:
        self.x_S1 = 0.
      if self.y_S1 is None:
        self.y_S1 = 0.
      if self.z_S1 is None:
        self.z_S1 = 0.
    else:
      self.x_S1 = 0.
      self.y_S1 = 0.
      self.z_S1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_S1, _x.y_S1, _x.z_S1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_S1, _x.y_S1, _x.z_S1,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_S1, _x.y_S1, _x.z_S1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_S1, _x.y_S1, _x.z_S1,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
class TrayectoriaEliptica1Parametros(object):
  _type          = 'camina3/TrayectoriaEliptica1Parametros'
  _md5sum = '2491c2de92c42878a38844eb1ab50cce'
  _request_class  = TrayectoriaEliptica1ParametrosRequest
  _response_class = TrayectoriaEliptica1ParametrosResponse
