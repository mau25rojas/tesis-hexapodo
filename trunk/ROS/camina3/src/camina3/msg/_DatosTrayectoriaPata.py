"""autogenerated by genpy from camina3/DatosTrayectoriaPata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DatosTrayectoriaPata(genpy.Message):
  _md5sum = "87c89360692a63851671408219f4f8b8"
  _type = "camina3/DatosTrayectoriaPata"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# datos_trayectoria_Pata.msg
# Mensaje para variables principales de trayectoria de pata

uint8     iteracion

#Tripode al que pertenece la pata
uint8     Tripode

#Periodo de paso
float32[] T

#delta de tiempo de trayectoria (entre 0-1)
float32   t_Trayectoria

#Npuntos de trayectorias
float32   divisionTrayectoriaPata

#Desfasaje en tiempo de pata
float32[] desfasaje_t

#Factor de apoyo
float32   beta

#Distancia XY a recorrer en apoyo
float32[] lambda_Apoyo

#Distancia XY a recorrer en transferencia
float32[] lambda_Transferencia

#Velocidad de apoyo
float32    velocidad_Apoyo

#Distancia en Z a recorrer en transferencia
float32   dh

#Offset para trayectoria visto desde la pata
float32   x_Offset
float32   y_Offset
float32   z_Offset

#Angulo de pata visto desde el robot
float32[] phi

#Angulo de giro de trayectoria
float32   alfa

#Bandera de cambio en trayectoria
bool      cambioTrayectoria

"""
  __slots__ = ['iteracion','Tripode','T','t_Trayectoria','divisionTrayectoriaPata','desfasaje_t','beta','lambda_Apoyo','lambda_Transferencia','velocidad_Apoyo','dh','x_Offset','y_Offset','z_Offset','phi','alfa','cambioTrayectoria']
  _slot_types = ['uint8','uint8','float32[]','float32','float32','float32[]','float32','float32[]','float32[]','float32','float32','float32','float32','float32','float32[]','float32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       iteracion,Tripode,T,t_Trayectoria,divisionTrayectoriaPata,desfasaje_t,beta,lambda_Apoyo,lambda_Transferencia,velocidad_Apoyo,dh,x_Offset,y_Offset,z_Offset,phi,alfa,cambioTrayectoria

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DatosTrayectoriaPata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.iteracion is None:
        self.iteracion = 0
      if self.Tripode is None:
        self.Tripode = 0
      if self.T is None:
        self.T = []
      if self.t_Trayectoria is None:
        self.t_Trayectoria = 0.
      if self.divisionTrayectoriaPata is None:
        self.divisionTrayectoriaPata = 0.
      if self.desfasaje_t is None:
        self.desfasaje_t = []
      if self.beta is None:
        self.beta = 0.
      if self.lambda_Apoyo is None:
        self.lambda_Apoyo = []
      if self.lambda_Transferencia is None:
        self.lambda_Transferencia = []
      if self.velocidad_Apoyo is None:
        self.velocidad_Apoyo = 0.
      if self.dh is None:
        self.dh = 0.
      if self.x_Offset is None:
        self.x_Offset = 0.
      if self.y_Offset is None:
        self.y_Offset = 0.
      if self.z_Offset is None:
        self.z_Offset = 0.
      if self.phi is None:
        self.phi = []
      if self.alfa is None:
        self.alfa = 0.
      if self.cambioTrayectoria is None:
        self.cambioTrayectoria = False
    else:
      self.iteracion = 0
      self.Tripode = 0
      self.T = []
      self.t_Trayectoria = 0.
      self.divisionTrayectoriaPata = 0.
      self.desfasaje_t = []
      self.beta = 0.
      self.lambda_Apoyo = []
      self.lambda_Transferencia = []
      self.velocidad_Apoyo = 0.
      self.dh = 0.
      self.x_Offset = 0.
      self.y_Offset = 0.
      self.z_Offset = 0.
      self.phi = []
      self.alfa = 0.
      self.cambioTrayectoria = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.iteracion, _x.Tripode))
      length = len(self.T)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.T))
      _x = self
      buff.write(_struct_2f.pack(_x.t_Trayectoria, _x.divisionTrayectoriaPata))
      length = len(self.desfasaje_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.desfasaje_t))
      buff.write(_struct_f.pack(self.beta))
      length = len(self.lambda_Apoyo)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lambda_Apoyo))
      length = len(self.lambda_Transferencia)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.lambda_Transferencia))
      _x = self
      buff.write(_struct_5f.pack(_x.velocidad_Apoyo, _x.dh, _x.x_Offset, _x.y_Offset, _x.z_Offset))
      length = len(self.phi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.phi))
      _x = self
      buff.write(_struct_fB.pack(_x.alfa, _x.cambioTrayectoria))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.iteracion, _x.Tripode,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.T = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 8
      (_x.t_Trayectoria, _x.divisionTrayectoriaPata,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.desfasaje_t = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (self.beta,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lambda_Apoyo = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lambda_Transferencia = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 20
      (_x.velocidad_Apoyo, _x.dh, _x.x_Offset, _x.y_Offset, _x.z_Offset,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.phi = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 5
      (_x.alfa, _x.cambioTrayectoria,) = _struct_fB.unpack(str[start:end])
      self.cambioTrayectoria = bool(self.cambioTrayectoria)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2B.pack(_x.iteracion, _x.Tripode))
      length = len(self.T)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.T.tostring())
      _x = self
      buff.write(_struct_2f.pack(_x.t_Trayectoria, _x.divisionTrayectoriaPata))
      length = len(self.desfasaje_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.desfasaje_t.tostring())
      buff.write(_struct_f.pack(self.beta))
      length = len(self.lambda_Apoyo)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lambda_Apoyo.tostring())
      length = len(self.lambda_Transferencia)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.lambda_Transferencia.tostring())
      _x = self
      buff.write(_struct_5f.pack(_x.velocidad_Apoyo, _x.dh, _x.x_Offset, _x.y_Offset, _x.z_Offset))
      length = len(self.phi)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.phi.tostring())
      _x = self
      buff.write(_struct_fB.pack(_x.alfa, _x.cambioTrayectoria))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.iteracion, _x.Tripode,) = _struct_2B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.T = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 8
      (_x.t_Trayectoria, _x.divisionTrayectoriaPata,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.desfasaje_t = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (self.beta,) = _struct_f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lambda_Apoyo = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.lambda_Transferencia = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 20
      (_x.velocidad_Apoyo, _x.dh, _x.x_Offset, _x.y_Offset, _x.z_Offset,) = _struct_5f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.phi = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      _x = self
      start = end
      end += 5
      (_x.alfa, _x.cambioTrayectoria,) = _struct_fB.unpack(str[start:end])
      self.cambioTrayectoria = bool(self.cambioTrayectoria)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
_struct_5f = struct.Struct("<5f")
_struct_fB = struct.Struct("<fB")
_struct_2B = struct.Struct("<2B")
_struct_f = struct.Struct("<f")
