"""autogenerated by genpy from camina3/Pisada.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Pisada(genpy.Message):
  _md5sum = "cb79cd2d31192960673d6ea9fbb7da98"
  _type = "camina3/Pisada"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Variable que identifica todos los parametros necesarios
# para definir una pisada por completo

# Identificacion de pata
uint8 Npata
# Variables en el plano
float32 coordenada_y
float32 coordenada_x
float32 coordenada_z
# Variables en el mapa
uint8[] coordenada_i
uint8[] coordenada_j
# Variables para calculo de trayectoria
float32   landa
float32   dh
float32[] p_Offset
float32[] alfa
float32[] desfasaje_t


"""
  __slots__ = ['Npata','coordenada_y','coordenada_x','coordenada_z','coordenada_i','coordenada_j','landa','dh','p_Offset','alfa','desfasaje_t']
  _slot_types = ['uint8','float32','float32','float32','uint8[]','uint8[]','float32','float32','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Npata,coordenada_y,coordenada_x,coordenada_z,coordenada_i,coordenada_j,landa,dh,p_Offset,alfa,desfasaje_t

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Pisada, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Npata is None:
        self.Npata = 0
      if self.coordenada_y is None:
        self.coordenada_y = 0.
      if self.coordenada_x is None:
        self.coordenada_x = 0.
      if self.coordenada_z is None:
        self.coordenada_z = 0.
      if self.coordenada_i is None:
        self.coordenada_i = ''
      if self.coordenada_j is None:
        self.coordenada_j = ''
      if self.landa is None:
        self.landa = 0.
      if self.dh is None:
        self.dh = 0.
      if self.p_Offset is None:
        self.p_Offset = []
      if self.alfa is None:
        self.alfa = []
      if self.desfasaje_t is None:
        self.desfasaje_t = []
    else:
      self.Npata = 0
      self.coordenada_y = 0.
      self.coordenada_x = 0.
      self.coordenada_z = 0.
      self.coordenada_i = ''
      self.coordenada_j = ''
      self.landa = 0.
      self.dh = 0.
      self.p_Offset = []
      self.alfa = []
      self.desfasaje_t = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3f.pack(_x.Npata, _x.coordenada_y, _x.coordenada_x, _x.coordenada_z))
      _x = self.coordenada_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenada_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.landa, _x.dh))
      length = len(self.p_Offset)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.p_Offset))
      length = len(self.alfa)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.alfa))
      length = len(self.desfasaje_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.desfasaje_t))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.Npata, _x.coordenada_y, _x.coordenada_x, _x.coordenada_z,) = _struct_B3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenada_i = str[start:end].decode('utf-8')
      else:
        self.coordenada_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenada_j = str[start:end].decode('utf-8')
      else:
        self.coordenada_j = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.landa, _x.dh,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.p_Offset = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.alfa = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.desfasaje_t = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3f.pack(_x.Npata, _x.coordenada_y, _x.coordenada_x, _x.coordenada_z))
      _x = self.coordenada_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenada_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2f.pack(_x.landa, _x.dh))
      length = len(self.p_Offset)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.p_Offset.tostring())
      length = len(self.alfa)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.alfa.tostring())
      length = len(self.desfasaje_t)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.desfasaje_t.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.Npata, _x.coordenada_y, _x.coordenada_x, _x.coordenada_z,) = _struct_B3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenada_i = str[start:end].decode('utf-8')
      else:
        self.coordenada_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenada_j = str[start:end].decode('utf-8')
      else:
        self.coordenada_j = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.landa, _x.dh,) = _struct_2f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.p_Offset = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.alfa = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.desfasaje_t = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3f = struct.Struct("<B3f")
_struct_2f = struct.Struct("<2f")
