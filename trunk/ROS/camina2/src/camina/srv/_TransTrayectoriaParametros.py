"""autogenerated by genpy from camina/TransTrayectoriaParametrosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransTrayectoriaParametrosRequest(genpy.Message):
  _md5sum = "8d929fee06477d2790c99ba1b074972c"
  _type = "camina/TransTrayectoriaParametrosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




int32 modo
int32 Npata
float32 x_S0
float32 y_S0
float32 z_S0
float32 x_UbicacionRob
float32 y_UbicacionRob
float32 theta_Rob

"""
  __slots__ = ['modo','Npata','x_S0','y_S0','z_S0','x_UbicacionRob','y_UbicacionRob','theta_Rob']
  _slot_types = ['int32','int32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       modo,Npata,x_S0,y_S0,z_S0,x_UbicacionRob,y_UbicacionRob,theta_Rob

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransTrayectoriaParametrosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.modo is None:
        self.modo = 0
      if self.Npata is None:
        self.Npata = 0
      if self.x_S0 is None:
        self.x_S0 = 0.
      if self.y_S0 is None:
        self.y_S0 = 0.
      if self.z_S0 is None:
        self.z_S0 = 0.
      if self.x_UbicacionRob is None:
        self.x_UbicacionRob = 0.
      if self.y_UbicacionRob is None:
        self.y_UbicacionRob = 0.
      if self.theta_Rob is None:
        self.theta_Rob = 0.
    else:
      self.modo = 0
      self.Npata = 0
      self.x_S0 = 0.
      self.y_S0 = 0.
      self.z_S0 = 0.
      self.x_UbicacionRob = 0.
      self.y_UbicacionRob = 0.
      self.theta_Rob = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2i6f.pack(_x.modo, _x.Npata, _x.x_S0, _x.y_S0, _x.z_S0, _x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.modo, _x.Npata, _x.x_S0, _x.y_S0, _x.z_S0, _x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_2i6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2i6f.pack(_x.modo, _x.Npata, _x.x_S0, _x.y_S0, _x.z_S0, _x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 32
      (_x.modo, _x.Npata, _x.x_S0, _x.y_S0, _x.z_S0, _x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_2i6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2i6f = struct.Struct("<2i6f")
"""autogenerated by genpy from camina/TransTrayectoriaParametrosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransTrayectoriaParametrosResponse(genpy.Message):
  _md5sum = "0f32183013d44c913143ef31ba4db302"
  _type = "camina/TransTrayectoriaParametrosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 x_Pata
float32 y_Pata
float32 z_Pata
float32 x_Mundo
float32 y_Mundo
float32 z_Mundo



"""
  __slots__ = ['x_Pata','y_Pata','z_Pata','x_Mundo','y_Mundo','z_Mundo']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_Pata,y_Pata,z_Pata,x_Mundo,y_Mundo,z_Mundo

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransTrayectoriaParametrosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_Pata is None:
        self.x_Pata = 0.
      if self.y_Pata is None:
        self.y_Pata = 0.
      if self.z_Pata is None:
        self.z_Pata = 0.
      if self.x_Mundo is None:
        self.x_Mundo = 0.
      if self.y_Mundo is None:
        self.y_Mundo = 0.
      if self.z_Mundo is None:
        self.z_Mundo = 0.
    else:
      self.x_Pata = 0.
      self.y_Pata = 0.
      self.z_Pata = 0.
      self.x_Mundo = 0.
      self.y_Mundo = 0.
      self.z_Mundo = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.x_Pata, _x.y_Pata, _x.z_Pata, _x.x_Mundo, _x.y_Mundo, _x.z_Mundo))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x_Pata, _x.y_Pata, _x.z_Pata, _x.x_Mundo, _x.y_Mundo, _x.z_Mundo,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.x_Pata, _x.y_Pata, _x.z_Pata, _x.x_Mundo, _x.y_Mundo, _x.z_Mundo))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.x_Pata, _x.y_Pata, _x.z_Pata, _x.x_Mundo, _x.y_Mundo, _x.z_Mundo,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6f = struct.Struct("<6f")
class TransTrayectoriaParametros(object):
  _type          = 'camina/TransTrayectoriaParametros'
  _md5sum = '9866ee774d3c585998bd3c65e1e27d64'
  _request_class  = TransTrayectoriaParametrosRequest
  _response_class = TransTrayectoriaParametrosResponse
