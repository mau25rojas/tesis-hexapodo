"""autogenerated by genpy from camina/TransHomogeneaParametrosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransHomogeneaParametrosRequest(genpy.Message):
  _md5sum = "aceac5eb556e05ac42d451dd97f7e309"
  _type = "camina/TransHomogeneaParametrosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




float32 x_Trasl
float32 y_Trasl
float32 z_Trasl
float32 x_S0
float32 y_S0
float32 z_S0
float32 theta_Rot

"""
  __slots__ = ['x_Trasl','y_Trasl','z_Trasl','x_S0','y_S0','z_S0','theta_Rot']
  _slot_types = ['float32','float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_Trasl,y_Trasl,z_Trasl,x_S0,y_S0,z_S0,theta_Rot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransHomogeneaParametrosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_Trasl is None:
        self.x_Trasl = 0.
      if self.y_Trasl is None:
        self.y_Trasl = 0.
      if self.z_Trasl is None:
        self.z_Trasl = 0.
      if self.x_S0 is None:
        self.x_S0 = 0.
      if self.y_S0 is None:
        self.y_S0 = 0.
      if self.z_S0 is None:
        self.z_S0 = 0.
      if self.theta_Rot is None:
        self.theta_Rot = 0.
    else:
      self.x_Trasl = 0.
      self.y_Trasl = 0.
      self.z_Trasl = 0.
      self.x_S0 = 0.
      self.y_S0 = 0.
      self.z_S0 = 0.
      self.theta_Rot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.x_Trasl, _x.y_Trasl, _x.z_Trasl, _x.x_S0, _x.y_S0, _x.z_S0, _x.theta_Rot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.x_Trasl, _x.y_Trasl, _x.z_Trasl, _x.x_S0, _x.y_S0, _x.z_S0, _x.theta_Rot,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7f.pack(_x.x_Trasl, _x.y_Trasl, _x.z_Trasl, _x.x_S0, _x.y_S0, _x.z_S0, _x.theta_Rot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.x_Trasl, _x.y_Trasl, _x.z_Trasl, _x.x_S0, _x.y_S0, _x.z_S0, _x.theta_Rot,) = _struct_7f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7f = struct.Struct("<7f")
"""autogenerated by genpy from camina/TransHomogeneaParametrosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class TransHomogeneaParametrosResponse(genpy.Message):
  _md5sum = "73f6b0fe798d15d67956a66be5ac55de"
  _type = "camina/TransHomogeneaParametrosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 x_S1
float32 y_S1
float32 z_S1




"""
  __slots__ = ['x_S1','y_S1','z_S1']
  _slot_types = ['float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_S1,y_S1,z_S1

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TransHomogeneaParametrosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_S1 is None:
        self.x_S1 = 0.
      if self.y_S1 is None:
        self.y_S1 = 0.
      if self.z_S1 is None:
        self.z_S1 = 0.
    else:
      self.x_S1 = 0.
      self.y_S1 = 0.
      self.z_S1 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_S1, _x.y_S1, _x.z_S1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_S1, _x.y_S1, _x.z_S1,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_S1, _x.y_S1, _x.z_S1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_S1, _x.y_S1, _x.z_S1,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
class TransHomogeneaParametros(object):
  _type          = 'camina/TransHomogeneaParametros'
  _md5sum = '41b2928bad69f5b3212af9260a28a390'
  _request_class  = TransHomogeneaParametrosRequest
  _response_class = TransHomogeneaParametrosResponse
