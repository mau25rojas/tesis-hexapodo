"""autogenerated by genpy from camina/PlanificadorParametrosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanificadorParametrosRequest(genpy.Message):
  _md5sum = "268fded160aefe1006502e407b48f228"
  _type = "camina/PlanificadorParametrosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




int32 Tripode
float32 T
float32[] tripode

"""
  __slots__ = ['Tripode','T','tripode']
  _slot_types = ['int32','float32','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Tripode,T,tripode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanificadorParametrosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Tripode is None:
        self.Tripode = 0
      if self.T is None:
        self.T = 0.
      if self.tripode is None:
        self.tripode = []
    else:
      self.Tripode = 0
      self.T = 0.
      self.tripode = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_if.pack(_x.Tripode, _x.T))
      length = len(self.tripode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.tripode))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Tripode, _x.T,) = _struct_if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tripode = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_if.pack(_x.Tripode, _x.T))
      length = len(self.tripode)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.tripode.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.Tripode, _x.T,) = _struct_if.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.tripode = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_if = struct.Struct("<if")
"""autogenerated by genpy from camina/PlanificadorParametrosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class PlanificadorParametrosResponse(genpy.Message):
  _md5sum = "225b312c42f31337880a1adddb7aa691"
  _type = "camina/PlanificadorParametrosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
int32 result
float32 modificacion_T
float32 modificacion_lambda





"""
  __slots__ = ['result','modificacion_T','modificacion_lambda']
  _slot_types = ['int32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result,modificacion_T,modificacion_lambda

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PlanificadorParametrosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = 0
      if self.modificacion_T is None:
        self.modificacion_T = 0.
      if self.modificacion_lambda is None:
        self.modificacion_lambda = 0.
    else:
      self.result = 0
      self.modificacion_T = 0.
      self.modificacion_lambda = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_i2f.pack(_x.result, _x.modificacion_T, _x.modificacion_lambda))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.result, _x.modificacion_T, _x.modificacion_lambda,) = _struct_i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_i2f.pack(_x.result, _x.modificacion_T, _x.modificacion_lambda))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.result, _x.modificacion_T, _x.modificacion_lambda,) = _struct_i2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_i2f = struct.Struct("<i2f")
class PlanificadorParametros(object):
  _type          = 'camina/PlanificadorParametros'
  _md5sum = '2cfab2152d05b84f7064513df1026477'
  _request_class  = PlanificadorParametrosRequest
  _response_class = PlanificadorParametrosResponse
