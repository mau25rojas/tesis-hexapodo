"""autogenerated by genpy from camina/InfoMapa.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class InfoMapa(genpy.Message):
  _md5sum = "5e07ed592db7018c38fbee28f179015c"
  _type = "camina/InfoMapa"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Este mensaje contiene toda la informacion del mapa
# dividido en celdas. Contiene informacion de celdas
# vacias y celdas con obstaculos
# Las dimensiones se manejan en metros
# y->i ... x->j

#total de celdas
uint8 nCeldas_i
uint8 nCeldas_j
uint8 iCelda
float32 tamanoCelda_i
float32 tamanoCelda_j
#obstaculos
uint8 cantidadObstaculos
uint8[] coordenadaObstaculo_i
uint8[] coordenadaObstaculo_j
#patas
uint8 NPata
uint8[] coordenadaPata_i
uint8[] coordenadaPata_j
#fuerza patas
uint8[]  pataApoyo
#ajuste
uint8[] coordenadaPreAjuste_i
uint8[] coordenadaPreAjuste_j
uint8[] coordenadaAjuste_i
uint8[] coordenadaAjuste_j


"""
  __slots__ = ['nCeldas_i','nCeldas_j','iCelda','tamanoCelda_i','tamanoCelda_j','cantidadObstaculos','coordenadaObstaculo_i','coordenadaObstaculo_j','NPata','coordenadaPata_i','coordenadaPata_j','pataApoyo','coordenadaPreAjuste_i','coordenadaPreAjuste_j','coordenadaAjuste_i','coordenadaAjuste_j']
  _slot_types = ['uint8','uint8','uint8','float32','float32','uint8','uint8[]','uint8[]','uint8','uint8[]','uint8[]','uint8[]','uint8[]','uint8[]','uint8[]','uint8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       nCeldas_i,nCeldas_j,iCelda,tamanoCelda_i,tamanoCelda_j,cantidadObstaculos,coordenadaObstaculo_i,coordenadaObstaculo_j,NPata,coordenadaPata_i,coordenadaPata_j,pataApoyo,coordenadaPreAjuste_i,coordenadaPreAjuste_j,coordenadaAjuste_i,coordenadaAjuste_j

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(InfoMapa, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.nCeldas_i is None:
        self.nCeldas_i = 0
      if self.nCeldas_j is None:
        self.nCeldas_j = 0
      if self.iCelda is None:
        self.iCelda = 0
      if self.tamanoCelda_i is None:
        self.tamanoCelda_i = 0.
      if self.tamanoCelda_j is None:
        self.tamanoCelda_j = 0.
      if self.cantidadObstaculos is None:
        self.cantidadObstaculos = 0
      if self.coordenadaObstaculo_i is None:
        self.coordenadaObstaculo_i = ''
      if self.coordenadaObstaculo_j is None:
        self.coordenadaObstaculo_j = ''
      if self.NPata is None:
        self.NPata = 0
      if self.coordenadaPata_i is None:
        self.coordenadaPata_i = ''
      if self.coordenadaPata_j is None:
        self.coordenadaPata_j = ''
      if self.pataApoyo is None:
        self.pataApoyo = ''
      if self.coordenadaPreAjuste_i is None:
        self.coordenadaPreAjuste_i = ''
      if self.coordenadaPreAjuste_j is None:
        self.coordenadaPreAjuste_j = ''
      if self.coordenadaAjuste_i is None:
        self.coordenadaAjuste_i = ''
      if self.coordenadaAjuste_j is None:
        self.coordenadaAjuste_j = ''
    else:
      self.nCeldas_i = 0
      self.nCeldas_j = 0
      self.iCelda = 0
      self.tamanoCelda_i = 0.
      self.tamanoCelda_j = 0.
      self.cantidadObstaculos = 0
      self.coordenadaObstaculo_i = ''
      self.coordenadaObstaculo_j = ''
      self.NPata = 0
      self.coordenadaPata_i = ''
      self.coordenadaPata_j = ''
      self.pataApoyo = ''
      self.coordenadaPreAjuste_i = ''
      self.coordenadaPreAjuste_j = ''
      self.coordenadaAjuste_i = ''
      self.coordenadaAjuste_j = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3B2fB.pack(_x.nCeldas_i, _x.nCeldas_j, _x.iCelda, _x.tamanoCelda_i, _x.tamanoCelda_j, _x.cantidadObstaculos))
      _x = self.coordenadaObstaculo_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaObstaculo_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.NPata))
      _x = self.coordenadaPata_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPata_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pataApoyo
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPreAjuste_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPreAjuste_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaAjuste_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaAjuste_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.nCeldas_i, _x.nCeldas_j, _x.iCelda, _x.tamanoCelda_i, _x.tamanoCelda_j, _x.cantidadObstaculos,) = _struct_3B2fB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaObstaculo_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaObstaculo_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaObstaculo_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaObstaculo_j = str[start:end]
      start = end
      end += 1
      (self.NPata,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPata_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaPata_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPata_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaPata_j = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pataApoyo = str[start:end].decode('utf-8')
      else:
        self.pataApoyo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPreAjuste_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaPreAjuste_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPreAjuste_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaPreAjuste_j = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaAjuste_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaAjuste_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaAjuste_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaAjuste_j = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3B2fB.pack(_x.nCeldas_i, _x.nCeldas_j, _x.iCelda, _x.tamanoCelda_i, _x.tamanoCelda_j, _x.cantidadObstaculos))
      _x = self.coordenadaObstaculo_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaObstaculo_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_struct_B.pack(self.NPata))
      _x = self.coordenadaPata_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPata_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.pataApoyo
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPreAjuste_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaPreAjuste_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaAjuste_i
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.coordenadaAjuste_j
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.nCeldas_i, _x.nCeldas_j, _x.iCelda, _x.tamanoCelda_i, _x.tamanoCelda_j, _x.cantidadObstaculos,) = _struct_3B2fB.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaObstaculo_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaObstaculo_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaObstaculo_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaObstaculo_j = str[start:end]
      start = end
      end += 1
      (self.NPata,) = _struct_B.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPata_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaPata_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPata_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaPata_j = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pataApoyo = str[start:end].decode('utf-8')
      else:
        self.pataApoyo = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPreAjuste_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaPreAjuste_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaPreAjuste_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaPreAjuste_j = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaAjuste_i = str[start:end].decode('utf-8')
      else:
        self.coordenadaAjuste_i = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.coordenadaAjuste_j = str[start:end].decode('utf-8')
      else:
        self.coordenadaAjuste_j = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3B2fB = struct.Struct("<3B2fB")
_struct_B = struct.Struct("<B")
