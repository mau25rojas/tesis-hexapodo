"""autogenerated by genpy from camina/EspacioTrabajoParametrosRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EspacioTrabajoParametrosRequest(genpy.Message):
  _md5sum = "dd031cc009b69a886f1da1cc40d807c4"
  _type = "camina/EspacioTrabajoParametrosRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """




float32 PosicionCuerpo_x
float32 PosicionCuerpo_y
float32 theta_CuerpoRobot

"""
  __slots__ = ['PosicionCuerpo_x','PosicionCuerpo_y','theta_CuerpoRobot']
  _slot_types = ['float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       PosicionCuerpo_x,PosicionCuerpo_y,theta_CuerpoRobot

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EspacioTrabajoParametrosRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.PosicionCuerpo_x is None:
        self.PosicionCuerpo_x = 0.
      if self.PosicionCuerpo_y is None:
        self.PosicionCuerpo_y = 0.
      if self.theta_CuerpoRobot is None:
        self.theta_CuerpoRobot = 0.
    else:
      self.PosicionCuerpo_x = 0.
      self.PosicionCuerpo_y = 0.
      self.theta_CuerpoRobot = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.PosicionCuerpo_x, _x.PosicionCuerpo_y, _x.theta_CuerpoRobot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.PosicionCuerpo_x, _x.PosicionCuerpo_y, _x.theta_CuerpoRobot,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.PosicionCuerpo_x, _x.PosicionCuerpo_y, _x.theta_CuerpoRobot))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.PosicionCuerpo_x, _x.PosicionCuerpo_y, _x.theta_CuerpoRobot,) = _struct_3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
"""autogenerated by genpy from camina/EspacioTrabajoParametrosResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class EspacioTrabajoParametrosResponse(genpy.Message):
  _md5sum = "2f61908852f6cb1cdefa5dbfb7d0f25c"
  _type = "camina/EspacioTrabajoParametrosResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32[] EspacioTrabajoPata1_x
float32[] EspacioTrabajoPata2_x
float32[] EspacioTrabajoPata3_x
float32[] EspacioTrabajoPata4_x
float32[] EspacioTrabajoPata5_x
float32[] EspacioTrabajoPata6_x
float32[] EspacioTrabajoPata1_y
float32[] EspacioTrabajoPata2_y
float32[] EspacioTrabajoPata3_y
float32[] EspacioTrabajoPata4_y
float32[] EspacioTrabajoPata5_y
float32[] EspacioTrabajoPata6_y




"""
  __slots__ = ['EspacioTrabajoPata1_x','EspacioTrabajoPata2_x','EspacioTrabajoPata3_x','EspacioTrabajoPata4_x','EspacioTrabajoPata5_x','EspacioTrabajoPata6_x','EspacioTrabajoPata1_y','EspacioTrabajoPata2_y','EspacioTrabajoPata3_y','EspacioTrabajoPata4_y','EspacioTrabajoPata5_y','EspacioTrabajoPata6_y']
  _slot_types = ['float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       EspacioTrabajoPata1_x,EspacioTrabajoPata2_x,EspacioTrabajoPata3_x,EspacioTrabajoPata4_x,EspacioTrabajoPata5_x,EspacioTrabajoPata6_x,EspacioTrabajoPata1_y,EspacioTrabajoPata2_y,EspacioTrabajoPata3_y,EspacioTrabajoPata4_y,EspacioTrabajoPata5_y,EspacioTrabajoPata6_y

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EspacioTrabajoParametrosResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.EspacioTrabajoPata1_x is None:
        self.EspacioTrabajoPata1_x = []
      if self.EspacioTrabajoPata2_x is None:
        self.EspacioTrabajoPata2_x = []
      if self.EspacioTrabajoPata3_x is None:
        self.EspacioTrabajoPata3_x = []
      if self.EspacioTrabajoPata4_x is None:
        self.EspacioTrabajoPata4_x = []
      if self.EspacioTrabajoPata5_x is None:
        self.EspacioTrabajoPata5_x = []
      if self.EspacioTrabajoPata6_x is None:
        self.EspacioTrabajoPata6_x = []
      if self.EspacioTrabajoPata1_y is None:
        self.EspacioTrabajoPata1_y = []
      if self.EspacioTrabajoPata2_y is None:
        self.EspacioTrabajoPata2_y = []
      if self.EspacioTrabajoPata3_y is None:
        self.EspacioTrabajoPata3_y = []
      if self.EspacioTrabajoPata4_y is None:
        self.EspacioTrabajoPata4_y = []
      if self.EspacioTrabajoPata5_y is None:
        self.EspacioTrabajoPata5_y = []
      if self.EspacioTrabajoPata6_y is None:
        self.EspacioTrabajoPata6_y = []
    else:
      self.EspacioTrabajoPata1_x = []
      self.EspacioTrabajoPata2_x = []
      self.EspacioTrabajoPata3_x = []
      self.EspacioTrabajoPata4_x = []
      self.EspacioTrabajoPata5_x = []
      self.EspacioTrabajoPata6_x = []
      self.EspacioTrabajoPata1_y = []
      self.EspacioTrabajoPata2_y = []
      self.EspacioTrabajoPata3_y = []
      self.EspacioTrabajoPata4_y = []
      self.EspacioTrabajoPata5_y = []
      self.EspacioTrabajoPata6_y = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.EspacioTrabajoPata1_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata1_x))
      length = len(self.EspacioTrabajoPata2_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata2_x))
      length = len(self.EspacioTrabajoPata3_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata3_x))
      length = len(self.EspacioTrabajoPata4_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata4_x))
      length = len(self.EspacioTrabajoPata5_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata5_x))
      length = len(self.EspacioTrabajoPata6_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata6_x))
      length = len(self.EspacioTrabajoPata1_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata1_y))
      length = len(self.EspacioTrabajoPata2_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata2_y))
      length = len(self.EspacioTrabajoPata3_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata3_y))
      length = len(self.EspacioTrabajoPata4_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata4_y))
      length = len(self.EspacioTrabajoPata5_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata5_y))
      length = len(self.EspacioTrabajoPata6_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.EspacioTrabajoPata6_y))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata1_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata2_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata3_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata4_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata5_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata6_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata1_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata2_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata3_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata4_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata5_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata6_y = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.EspacioTrabajoPata1_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata1_x.tostring())
      length = len(self.EspacioTrabajoPata2_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata2_x.tostring())
      length = len(self.EspacioTrabajoPata3_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata3_x.tostring())
      length = len(self.EspacioTrabajoPata4_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata4_x.tostring())
      length = len(self.EspacioTrabajoPata5_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata5_x.tostring())
      length = len(self.EspacioTrabajoPata6_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata6_x.tostring())
      length = len(self.EspacioTrabajoPata1_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata1_y.tostring())
      length = len(self.EspacioTrabajoPata2_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata2_y.tostring())
      length = len(self.EspacioTrabajoPata3_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata3_y.tostring())
      length = len(self.EspacioTrabajoPata4_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata4_y.tostring())
      length = len(self.EspacioTrabajoPata5_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata5_y.tostring())
      length = len(self.EspacioTrabajoPata6_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.EspacioTrabajoPata6_y.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata1_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata2_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata3_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata4_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata5_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata6_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata1_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata2_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata3_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata4_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata5_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.EspacioTrabajoPata6_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
class EspacioTrabajoParametros(object):
  _type          = 'camina/EspacioTrabajoParametros'
  _md5sum = '37cf44a760f68372fb212ab2b0124e54'
  _request_class  = EspacioTrabajoParametrosRequest
  _response_class = EspacioTrabajoParametrosResponse
