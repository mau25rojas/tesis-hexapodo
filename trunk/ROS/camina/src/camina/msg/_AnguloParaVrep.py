"""autogenerated by genpy from camina/AnguloParaVrep.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class AnguloParaVrep(genpy.Message):
  _md5sum = "47c3d36bec9cce5863a14bdc48b0086d"
  _type = "camina/AnguloParaVrep"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Variable de angulos de motores de pata "Npata"
# Utilizado para comunicacion con Vrep
# Razon de duplicacion (hay otro archivo con esta informacion):
# ..era necesario otro tipo de variables 

uint8 Npata
float32 Q1
float32 Q2
float32 Q3


"""
  __slots__ = ['Npata','Q1','Q2','Q3']
  _slot_types = ['uint8','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       Npata,Q1,Q2,Q3

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(AnguloParaVrep, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.Npata is None:
        self.Npata = 0
      if self.Q1 is None:
        self.Q1 = 0.
      if self.Q2 is None:
        self.Q2 = 0.
      if self.Q3 is None:
        self.Q3 = 0.
    else:
      self.Npata = 0
      self.Q1 = 0.
      self.Q2 = 0.
      self.Q3 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_B3f.pack(_x.Npata, _x.Q1, _x.Q2, _x.Q3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.Npata, _x.Q1, _x.Q2, _x.Q3,) = _struct_B3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_B3f.pack(_x.Npata, _x.Q1, _x.Q2, _x.Q3))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 13
      (_x.Npata, _x.Q1, _x.Q2, _x.Q3,) = _struct_B3f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B3f = struct.Struct("<B3f")
