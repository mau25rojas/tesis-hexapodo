"""autogenerated by genpy from camina/DatosTrayectorias.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import camina.msg

class DatosTrayectorias(genpy.Message):
  _md5sum = "ba3740183a041b70f36da40705b5be4b"
  _type = "camina/DatosTrayectorias"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Trayectorias en mundo

float32   x_UbicacionRob
float32   y_UbicacionRob
float32   theta_Rob

camina/Punto[6] trayectoriaPata


================================================================================
MSG: camina/Punto
#Punto en el espacio 3D

float32 x
float32 y
float32 z


"""
  __slots__ = ['x_UbicacionRob','y_UbicacionRob','theta_Rob','trayectoriaPata']
  _slot_types = ['float32','float32','float32','camina/Punto[6]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_UbicacionRob,y_UbicacionRob,theta_Rob,trayectoriaPata

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DatosTrayectorias, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_UbicacionRob is None:
        self.x_UbicacionRob = 0.
      if self.y_UbicacionRob is None:
        self.y_UbicacionRob = 0.
      if self.theta_Rob is None:
        self.theta_Rob = 0.
      if self.trayectoriaPata is None:
        self.trayectoriaPata = [camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto()]
    else:
      self.x_UbicacionRob = 0.
      self.y_UbicacionRob = 0.
      self.theta_Rob = 0.
      self.trayectoriaPata = [camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto(),camina.msg.Punto()]

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
      for val1 in self.trayectoriaPata:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trayectoriaPata is None:
        self.trayectoriaPata = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_3f.unpack(str[start:end])
      self.trayectoriaPata = []
      for i in range(0, 6):
        val1 = camina.msg.Punto()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.trayectoriaPata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
      for val1 in self.trayectoriaPata:
        _x = val1
        buff.write(_struct_3f.pack(_x.x, _x.y, _x.z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trayectoriaPata is None:
        self.trayectoriaPata = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_3f.unpack(str[start:end])
      self.trayectoriaPata = []
      for i in range(0, 6):
        val1 = camina.msg.Punto()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _struct_3f.unpack(str[start:end])
        self.trayectoriaPata.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
