"""autogenerated by genpy from camina/DatosTrayectorias2.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DatosTrayectorias2(genpy.Message):
  _md5sum = "5c2624c7c3b5e4feccc52fb2167dd1ec"
  _type = "camina/DatosTrayectorias2"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """#Trayectorias en mundo

float32   x_UbicacionRob
float32   y_UbicacionRob
float32   theta_Rob

#Pata1
float32[] trayectoriaPata1_x
float32[] trayectoriaPata1_y
float32[] trayectoriaPata1_z
#Pata2
float32[] trayectoriaPata2_x
float32[] trayectoriaPata2_y
float32[] trayectoriaPata2_z
#Pata3
float32[] trayectoriaPata3_x
float32[] trayectoriaPata3_y
float32[] trayectoriaPata3_z
#Pata4
float32[] trayectoriaPata4_x
float32[] trayectoriaPata4_y
float32[] trayectoriaPata4_z
#Pata5
float32[] trayectoriaPata5_x
float32[] trayectoriaPata5_y
float32[] trayectoriaPata5_z
#Pata6
float32[] trayectoriaPata6_x
float32[] trayectoriaPata6_y
float32[] trayectoriaPata6_z

"""
  __slots__ = ['x_UbicacionRob','y_UbicacionRob','theta_Rob','trayectoriaPata1_x','trayectoriaPata1_y','trayectoriaPata1_z','trayectoriaPata2_x','trayectoriaPata2_y','trayectoriaPata2_z','trayectoriaPata3_x','trayectoriaPata3_y','trayectoriaPata3_z','trayectoriaPata4_x','trayectoriaPata4_y','trayectoriaPata4_z','trayectoriaPata5_x','trayectoriaPata5_y','trayectoriaPata5_z','trayectoriaPata6_x','trayectoriaPata6_y','trayectoriaPata6_z']
  _slot_types = ['float32','float32','float32','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       x_UbicacionRob,y_UbicacionRob,theta_Rob,trayectoriaPata1_x,trayectoriaPata1_y,trayectoriaPata1_z,trayectoriaPata2_x,trayectoriaPata2_y,trayectoriaPata2_z,trayectoriaPata3_x,trayectoriaPata3_y,trayectoriaPata3_z,trayectoriaPata4_x,trayectoriaPata4_y,trayectoriaPata4_z,trayectoriaPata5_x,trayectoriaPata5_y,trayectoriaPata5_z,trayectoriaPata6_x,trayectoriaPata6_y,trayectoriaPata6_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DatosTrayectorias2, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.x_UbicacionRob is None:
        self.x_UbicacionRob = 0.
      if self.y_UbicacionRob is None:
        self.y_UbicacionRob = 0.
      if self.theta_Rob is None:
        self.theta_Rob = 0.
      if self.trayectoriaPata1_x is None:
        self.trayectoriaPata1_x = []
      if self.trayectoriaPata1_y is None:
        self.trayectoriaPata1_y = []
      if self.trayectoriaPata1_z is None:
        self.trayectoriaPata1_z = []
      if self.trayectoriaPata2_x is None:
        self.trayectoriaPata2_x = []
      if self.trayectoriaPata2_y is None:
        self.trayectoriaPata2_y = []
      if self.trayectoriaPata2_z is None:
        self.trayectoriaPata2_z = []
      if self.trayectoriaPata3_x is None:
        self.trayectoriaPata3_x = []
      if self.trayectoriaPata3_y is None:
        self.trayectoriaPata3_y = []
      if self.trayectoriaPata3_z is None:
        self.trayectoriaPata3_z = []
      if self.trayectoriaPata4_x is None:
        self.trayectoriaPata4_x = []
      if self.trayectoriaPata4_y is None:
        self.trayectoriaPata4_y = []
      if self.trayectoriaPata4_z is None:
        self.trayectoriaPata4_z = []
      if self.trayectoriaPata5_x is None:
        self.trayectoriaPata5_x = []
      if self.trayectoriaPata5_y is None:
        self.trayectoriaPata5_y = []
      if self.trayectoriaPata5_z is None:
        self.trayectoriaPata5_z = []
      if self.trayectoriaPata6_x is None:
        self.trayectoriaPata6_x = []
      if self.trayectoriaPata6_y is None:
        self.trayectoriaPata6_y = []
      if self.trayectoriaPata6_z is None:
        self.trayectoriaPata6_z = []
    else:
      self.x_UbicacionRob = 0.
      self.y_UbicacionRob = 0.
      self.theta_Rob = 0.
      self.trayectoriaPata1_x = []
      self.trayectoriaPata1_y = []
      self.trayectoriaPata1_z = []
      self.trayectoriaPata2_x = []
      self.trayectoriaPata2_y = []
      self.trayectoriaPata2_z = []
      self.trayectoriaPata3_x = []
      self.trayectoriaPata3_y = []
      self.trayectoriaPata3_z = []
      self.trayectoriaPata4_x = []
      self.trayectoriaPata4_y = []
      self.trayectoriaPata4_z = []
      self.trayectoriaPata5_x = []
      self.trayectoriaPata5_y = []
      self.trayectoriaPata5_z = []
      self.trayectoriaPata6_x = []
      self.trayectoriaPata6_y = []
      self.trayectoriaPata6_z = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
      length = len(self.trayectoriaPata1_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata1_x))
      length = len(self.trayectoriaPata1_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata1_y))
      length = len(self.trayectoriaPata1_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata1_z))
      length = len(self.trayectoriaPata2_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata2_x))
      length = len(self.trayectoriaPata2_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata2_y))
      length = len(self.trayectoriaPata2_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata2_z))
      length = len(self.trayectoriaPata3_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata3_x))
      length = len(self.trayectoriaPata3_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata3_y))
      length = len(self.trayectoriaPata3_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata3_z))
      length = len(self.trayectoriaPata4_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata4_x))
      length = len(self.trayectoriaPata4_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata4_y))
      length = len(self.trayectoriaPata4_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata4_z))
      length = len(self.trayectoriaPata5_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata5_x))
      length = len(self.trayectoriaPata5_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata5_y))
      length = len(self.trayectoriaPata5_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata5_z))
      length = len(self.trayectoriaPata6_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata6_x))
      length = len(self.trayectoriaPata6_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata6_y))
      length = len(self.trayectoriaPata6_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.trayectoriaPata6_z))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_z = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_x = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_y = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_z = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3f.pack(_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob))
      length = len(self.trayectoriaPata1_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata1_x.tostring())
      length = len(self.trayectoriaPata1_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata1_y.tostring())
      length = len(self.trayectoriaPata1_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata1_z.tostring())
      length = len(self.trayectoriaPata2_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata2_x.tostring())
      length = len(self.trayectoriaPata2_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata2_y.tostring())
      length = len(self.trayectoriaPata2_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata2_z.tostring())
      length = len(self.trayectoriaPata3_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata3_x.tostring())
      length = len(self.trayectoriaPata3_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata3_y.tostring())
      length = len(self.trayectoriaPata3_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata3_z.tostring())
      length = len(self.trayectoriaPata4_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata4_x.tostring())
      length = len(self.trayectoriaPata4_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata4_y.tostring())
      length = len(self.trayectoriaPata4_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata4_z.tostring())
      length = len(self.trayectoriaPata5_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata5_x.tostring())
      length = len(self.trayectoriaPata5_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata5_y.tostring())
      length = len(self.trayectoriaPata5_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata5_z.tostring())
      length = len(self.trayectoriaPata6_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata6_x.tostring())
      length = len(self.trayectoriaPata6_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata6_y.tostring())
      length = len(self.trayectoriaPata6_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.trayectoriaPata6_z.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 12
      (_x.x_UbicacionRob, _x.y_UbicacionRob, _x.theta_Rob,) = _struct_3f.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata1_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata2_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata3_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata4_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata5_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_x = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_y = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.trayectoriaPata6_z = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3f = struct.Struct("<3f")
